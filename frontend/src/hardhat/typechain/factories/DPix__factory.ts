/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { DPix } from "../DPix";

export class DPix__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _tokenAddress: string,
    _nftAddress: string,
    overrides?: Overrides
  ): Promise<DPix> {
    return super.deploy(_tokenAddress, _nftAddress, overrides || {}) as Promise<
      DPix
    >;
  }
  getDeployTransaction(
    _tokenAddress: string,
    _nftAddress: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _tokenAddress,
      _nftAddress,
      overrides || {}
    );
  }
  attach(address: string): DPix {
    return super.attach(address) as DPix;
  }
  connect(signer: Signer): DPix__factory {
    return super.connect(signer) as DPix__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DPix {
    return new Contract(address, _abi, signerOrProvider) as DPix;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "buyNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dpixNFT",
    outputs: [
      {
        internalType: "contract DPixNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dpixToken",
    outputs: [
      {
        internalType: "contract DPixToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040526004608081905263088a0d2f60e31b60a09081526100259160009190610082565b5034801561003257600080fd5b506040516107a33803806107a383398101604081905261005191610137565b600280546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790556101a4565b82805461008e90610169565b90600052602060002090601f0160209004810192826100b057600085556100f6565b82601f106100c957805160ff19168380011785556100f6565b828001600101855582156100f6579182015b828111156100f65782518255916020019190600101906100db565b50610102929150610106565b5090565b5b808211156101025760008155600101610107565b80516001600160a01b038116811461013257600080fd5b919050565b60008060408385031215610149578182fd5b6101528361011b565b91506101606020840161011b565b90509250929050565b60028104600182168061017d57607f821691505b6020821081141561019e57634e487b7160e01b600052602260045260246000fd5b50919050565b6105f0806101b36000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806326a49e3714610085578063369bf53b146100a557806351ed8288146100ba5780635b4fcd6c146100cf578063f7d97577146100d7575b600080fd5b61006f6100ea565b60405161007c9190610523565b60405180910390f35b6100986100933660046104b2565b610178565b60405161007c9190610576565b6100ad61018a565b60405161007c919061050f565b6100cd6100c83660046104b2565b610199565b005b6100ad6103b0565b6100cd6100e53660046104ca565b6103bf565b600080546100f79061057f565b80601f01602080910402602001604051908101604052809291908181526020018280546101239061057f565b80156101705780601f1061014557610100808354040283529160200191610170565b820191906000526020600020905b81548152906001019060200180831161015357829003601f168201915b505050505081565b60016020526000908152604090205481565b6003546001600160a01b031681565b6000818152600160205260409020546101b157600080fd5b6002546003546040516331a9108f60e11b81526001600160a01b03928316926323b872dd923392911690636352211e906101ef908790600401610576565b60206040518083038186803b15801561020757600080fd5b505afa15801561021b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023f9190610464565b600085815260016020526040908190205490516001600160e01b031960e086901b168152610272939291906004016104eb565b602060405180830381600087803b15801561028c57600080fd5b505af11580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610492565b506003546040516331a9108f60e11b81526001600160a01b03909116906323b872dd908290636352211e906102fd908690600401610576565b60206040518083038186803b15801561031557600080fd5b505afa158015610329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034d9190610464565b33846040518463ffffffff1660e01b815260040161036d939291906104eb565b600060405180830381600087803b15801561038757600080fd5b505af115801561039b573d6000803e3d6000fd5b50505060009182525060016020526040812055565b6002546001600160a01b031681565b6003546040516331a9108f60e11b815233916001600160a01b031690636352211e906103ef908690600401610576565b60206040518083038186803b15801561040757600080fd5b505afa15801561041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043f9190610464565b6001600160a01b03161461045257600080fd5b60009182526001602052604090912055565b600060208284031215610475578081fd5b81516001600160a01b038116811461048b578182fd5b9392505050565b6000602082840312156104a3578081fd5b8151801515811461048b578182fd5b6000602082840312156104c3578081fd5b5035919050565b600080604083850312156104dc578081fd5b50508035926020909101359150565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0391909116815260200190565b6000602080835283518082850152825b8181101561054f57858101830151858201604001528201610533565b818111156105605783604083870101525b50601f01601f1916929092016040019392505050565b90815260200190565b60028104600182168061059357607f821691505b602082108114156105b457634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212205fec79c6d9549fc9356ef1e259a49492b10d6b83e778e9f00502d13c4446b1a064736f6c63430008000033";
